### user-service > config-service > 속성 변경 반영
POST {{host}}/user-service/actuator/refresh

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status == 200, "Response status is not 200");
});
%}

### user-service > 사용자 추가 이전 > 사용자 로그인
POST {{host}}/user-service/login
Content-Type: application/json

{
  "email": "laonzenamoon@gmail.com",
  "password": "asdf1234"
}

> {%
client.test("Request executed unauthorized", function() {
  client.assert(response.status == 401, "Response status is not 401");
});
client.global.set("jwt", response.headers.token);
%}

### user-service > 사용자 추가
POST {{host}}/user-service/users
Content-Type: application/json

{
  "email": "laonzenamoon@gmail.com",
  "name": "JUN LEE",
  "password": "asdf1234"
}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status == 201, "Response status is not 201");
});
client.global.set("userId", response.body.userId);
%}

### user-service > 사용자 추가 이후 > 사용자 로그인
POST {{host}}/user-service/login
Content-Type: application/json

{
  "email": "laonzenamoon@gmail.com",
  "password": "asdf1234"
}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status == 200, "Response status is not 200");
});
client.global.set("jwt", response.headers.valueOf("token"));
client.log(response.headers.valueOf("token"));
%}

### user-service > health check
GET {{host}}/user-service/health-check
Authorization: Bearer {{jwt}}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status == 200, "Response status is not 200");
});
%}

### user-service > 사용자 상세 조회
GET {{host}}/user-service/users/{{userId}}
Authorization: Bearer {{jwt}}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status == 200, "Response status is not 200");
});
%}

### user-service > 사용자 목록 조회
GET {{host}}/user-service/users
Authorization: Bearer {{jwt}}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status == 200, "Response status is not 200");
});
%}



### catalog-service > health check
GET {{host}}/catalog-service/health-check

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status == 200, "Response status is not 200");
});
%}

### catalog-service > 상품 목록 조회
GET {{host}}/catalog-service/catalogs

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status == 200, "Response status is not 200");
});
client.global.set("productId", response.body[0].productId);
%}



### order-service > health check
GET {{host}}/order-service/health-check

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status == 200, "Response status is not 200");
});
%}

### order-service > 주문 추가
POST {{host}}/order-service/{{userId}}/orders
Content-Type: application/json

{
  "productId": "{{productId}}",
  "quantity": 10
}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status == 201, "Response status is not 201");
});
client.global.set("orderId", response.body.orderId);
%}

### order-service > 주문 상세 조회
GET {{host}}/order-service/orders/{{orderId}}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status == 200, "Response status is not 200");
});
%}

### order-service > 주문 목록 조회
GET {{host}}/order-service/{{userId}}/orders

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status == 200, "Response status is not 200");
});
%}
